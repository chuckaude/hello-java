# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main", "jw*.*" ]
  pull_request:
    branches: [ "main", "jw*.*" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Black Duck Security Scan
      uses: blackduck-inc/black-duck-security-scan@v2.1.1
      with:
         # Specifies if the workflow should wait for the analysis to complete. Default value: true. If set to false, post merge workflows like PR comment, Fix PR, SARIF etc will not be applicable.
          #  coverity_waitForScan: # optional
    # Build command for Coverity
          #  coverity_build_command: # optional
    # Clean command for Coverity
           # coverity_clean_command: # optional
    # Coverity config file path (.yaml/.yml/.json)
       # If provided, Black Duck Security Action will download specific version of coverity thin client to use.
            #bridge_coverity_version: # optional
            polaris_server_url: ${{ secrets.POLARIS_SERVER_URL }}
            polaris_access_token: ${{ secrets.POLARIS_ACCESS_TOKEN }}
            polaris_assessment_types: "SCA,SAST"
            polaris_application_name: "JWtest"
            polaris_project_name: "hello-java"
            polaris_branch_name: "main"
    # Flag to enable pull request comments based on Polaris scan result
            #polaris_prComment_enabled: # optional
    # List of severities for which the PR Comments should be created
           # polaris_prComment_severities: # optional
    # Polaris parent branch name
            # polaris_branch_parent_name: # optional
    # Polaris test type to trigger signature scan or package manager scan
            # polaris_test_sca_type: # optional
            # Flag to enable/disable Polaris SARIF report generation
            # polaris_reports_sarif_create: # optional
            # File path including file name where Polaris SARIF report should be created
            # polaris_reports_sarif_file_path: # optional
            # Indicates what SAST/SCA issues severity categories to include in Polaris SARIF file report
            # polaris_reports_sarif_severities: # optional
            # Flag to enable/disable Component-Version grouping for SCA Issues in Polaris SARIF report rules section
            # polaris_reports_sarif_groupSCAIssues: # optional
    # Enum to indicate which assessment issues type to include in Polaris SARIF file report
            # polaris_reports_sarif_issue_types: # optional
        # Flag to enable/disable uploading of Polaris SARIF report to GitHub Advanced Security
            # polaris_upload_sarif_report: yes
        # Specifies if the workflow should wait for the analysis to complete. Default value: true. If set to false, post merge workflows like PR comment, Fix PR, SARIF etc will not be applicable.
            # polaris_waitForScan: # optional
          # The test mode type of this scan
            # polaris_assessment_mode: # optional
          # The project source directory. Defaults to repository root directory. Set this to specify a custom folder that is other than repository root
            # project_directory: # optional
          # The zipped source file path. It overrides the project directory setting
            # project_source_archive: # optional
          # Flag indicating whether to preserve symlinks in the source zip
            # project_source_preserveSymLinks: # optional
          # A list of git ignore pattern strings that indicate the files need to be excluded from the zip file
            # project_source_excludes: # optional
          # Bridge CLI Install Directory
            # bridgecli_install_directory: # optional
          # URL to download bridge from
            # bridgecli_download_url: # optional
          # Github token to be used for git related rest operation
            # github_token: # optional
          # To include diagnostics info and export as zip
            include_diagnostics: yes
          # Number of days to keep the diagnostics files downloadable
            #diagnostics_retention_days: # optional
          # To enable creation of badges on the GitHub repository for polaris
            # polaris_policy_badges_create: # optional
          # To limit number of badges to be displayed on the GitHub repository for polaris
            # polaris_policy_badges_maxCount: # optional
          # Specify the build status if policy violating issues are found.
            # mark_build_status: # optional, default is failure
                
        
