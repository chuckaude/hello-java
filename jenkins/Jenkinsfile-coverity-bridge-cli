// example Jenkinsfile for Coverity scans using the Bridge CLI
// https://documentation.blackduck.com/bundle/bridge/page/documentation/c_overview.html
pipeline {
    agent { label 'linux64' }
    environment {
        ORG_NAME = "${env.GIT_URL.tokenize('/.')[-3]}"
        REPO_NAME = "${env.GIT_URL.tokenize('/.')[-2]}"
        FULLSCAN = "${env.BRANCH_NAME ==~ /^(main|master|develop|stage|release)$/ ? 'true' : 'false'}"
        PRSCAN = "${env.CHANGE_TARGET ==~ /^(main|master|develop|stage|release)$/ ? 'true' : 'false'}"
        BRIDGECLI_LINUX64 = 'https://repo.blackduck.com/artifactory/bds-integrations-release/com/blackduck/integration/bridge/binaries/bridge-cli-bundle/latest/bridge-cli-bundle-linux64.zip'
        BRIDGE_COVERITY_CONNECT_URL = 'https://coverity.field-test.blackduck.com'
        COVERITY_CREDENTIALS = credentials('coverity-committer')
        BRIDGE_COVERITY_CONNECT_USER_NAME = "${env.COVERITY_CREDENTIALS_USR}"
        BRIDGE_COVERITY_CONNECT_USER_PASSWORD = "${env.COVERITY_CREDENTIALS_PSW}"
        BRIDGE_COVERITY_BUILD_COMMAND = 'mvn -B -DskipTests package'
        BRIDGE_COVERITY_CLEAN_COMMAND = 'mvn -B clean'
        # BRIDGE_COVERITY_LOCAL = true
        GITHUB_TOKEN = credentials('github-pat')
    }
    tools {
        maven 'maven-3'
        jdk 'openjdk-21'
    }
    stages {
        stage('Build') {
            steps {
                sh 'mvn -B package'
            }
        }
        stage('Coverity Full Scan') {
            when { environment name: 'FULLSCAN', value: 'true' }
            steps {
                script {
                    status = sh returnStatus: true, script: '''
                        curl -fLsS -o bridge.zip $BRIDGECLI_LINUX64 && unzip -qo -d $WORKSPACE_TMP bridge.zip && rm -f bridge.zip
                        $WORKSPACE_TMP/bridge-cli-bundle-linux64/bridge-cli --stage connect \
                            coverity.connect.project.name=$REPO_NAME \
                            coverity.connect.stream.name=$REPO_NAME-$BRANCH_NAME \
                            coverity.connect.policy.view='Outstanding Issues' \
                            coverity.args="-o commit.connect.description=$BUILD_TAG"
                    '''
                    if (status == 8) { unstable 'policy violation' }
                    else if (status != 0) { error 'scan failure' }
                }
            }
        }
        stage('Coverity PR Scan') {
            when { environment name: 'PRSCAN', value: 'true' }
            steps {
                script {
                    status = sh returnStatus: true, script: '''
                        curl -fLsS -o bridge.zip $BRIDGECLI_LINUX64 && unzip -qo -d $WORKSPACE_TMP bridge.zip && rm -f bridge.zip
                        $WORKSPACE_TMP/bridge-cli-bundle-linux64/bridge-cli --stage connect \
                            coverity.connect.project.name=$REPO_NAME \
                            coverity.connect.stream.name=$REPO_NAME-$CHANGE_TARGET \
                            coverity.automation.prcomment=true \
                            github.repository.name=$REPO_NAME \
                            github.repository.branch.name=$BRANCH_NAME \
                            github.repository.owner.name=$ORG_NAME \
                            github.repository.pull.number=$CHANGE_ID \
                            github.user.token=$GITHUB_TOKEN
                    '''
                    if (status == 8) { unstable 'policy violation' }
                    else if (status != 0) { error 'scan failure' }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts allowEmptyArchive: true, artifacts: '.bridge/bridge.log, .bridge/*/idir/build-log.txt'
            //zip archive: true, dir: '.bridge', zipFile: 'bridge-logs.zip'
            cleanWs()
        }
    }
}
